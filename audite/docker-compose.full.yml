services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15
    container_name: audite_postgres_full
    environment:
      POSTGRES_DB: audite_dev
      POSTGRES_USER: audite_user
      POSTGRES_PASSWORD: audite_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_full:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - audite_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audite_user -d audite_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend FastAPI
  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: audite_backend_full
    environment:
      - DATABASE_URL="postgresql://[SECRET-REMOVED]"
      - JWT_SECRET_KEY=audite_local_development_secret_key_32_chars_minimum_length_required_postgresql
      - ALGORITHM=HS256
      - ADMIN_USERNAME=admin_audite
      - ADMIN_PASSWORD=AuditE2024!SecureAdmin#2024
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080,http://127.0.0.1:3000,http://127.0.0.1:8080
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    networks:
      - audite_network
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
        echo 'ðŸ”„ Esperando base de datos...' &&
        sleep 10 &&
        echo 'ðŸš€ Iniciando servidor FastAPI (crearÃ¡ tablas automÃ¡ticamente)...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ../audite-frontend-explorer
      dockerfile: Dockerfile.dev
    container_name: audite_frontend_full
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_NODE_ENV=development
    ports:
      - "8080:8080"
    volumes:
      - ../audite-frontend-explorer/src:/app/src
      - ../audite-frontend-explorer/public:/app/public
      - ../audite-frontend-explorer/index.html:/app/index.html
      - ../audite-frontend-explorer/vite.config.ts:/app/vite.config.ts
      - ../audite-frontend-explorer/tailwind.config.ts:/app/tailwind.config.ts
      - ../audite-frontend-explorer/tsconfig.json:/app/tsconfig.json
    networks:
      - audite_network
    depends_on:
      - backend
    command: >
      sh -c "
        echo 'ðŸ“¦ Instalando dependencias del frontend...' &&
        npm install &&
        echo 'ðŸš€ Iniciando servidor de desarrollo...' &&
        npm run dev -- --host 0.0.0.0 --port 8080
      "

  # Adminer para gestionar la base de datos
  adminer:
    image: adminer
    container_name: audite_adminer_full
    restart: always
    ports:
      - "8081:8080"
    networks:
      - audite_network
    depends_on:
      - db
    environment:
      ADMINER_DEFAULT_SERVER: db

  # Redis para cache (opcional, para futuro)
  redis:
    image: redis:7-alpine
    container_name: audite_redis_full
    ports:
      - "6379:6379"
    networks:
      - audite_network
    command: redis-server --appendonly yes
    volumes:
      - redis_data_full:/data

volumes:
  postgres_data_full:
    driver: local
  redis_data_full:
    driver: local

networks:
  audite_network:
    driver: bridge 